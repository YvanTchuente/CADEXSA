{"version":3,"sources":["index.js","classes/carousel.js","classes/countdown.js","classes/date_diff.js","functions/header.js","functions/nice-select.js","functions/profile.js","functions/random.js","functions/validation.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClmxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"main.js","sourcesContent":["const pathname = window.location.pathname; // Location of the executing script\r\nconst path_to_signup = new RegExp(\"^/members/register.(html|php)+$\");\r\nconst path_to_profile = new RegExp(\"^/members/profile/?w*$\");\r\nconst path_to_recoveryACC = new RegExp(\r\n  \"^/members/recover_account.(html|php)+?w*$\"\r\n);\r\nconst sticky_header_enabled_pages = [\r\n  \"/\",\r\n  \"/news/\",\r\n  \"/events/\",\r\n  \"/gallery/\",\r\n  \"/about_us/\",\r\n  \"/contact_us/\",\r\n];\r\n// socket var for socket connection with chat servers\r\nlet chats_socket, chats_update_socket;\r\n\r\ndocument.onreadystatechange = function () {\r\n  const loader = document.querySelector(\"#loader\");\r\n  if (document.readyState == \"complete\") {\r\n    try {\r\n      fadeOut(loader, 500);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n};\r\n\r\nwindow.onload = function () {\r\n  /* Event Handler for clicks on empty sections of main page */\r\n  window.addEventListener(\"click\", (event) => {\r\n    if (document.querySelector(\".dropbtn\")) {\r\n      if (!event.target.matches(\".dropbtn\")) {\r\n        const dropdown = document.querySelector(\".user-panel .dropdown\");\r\n        dropdown.style = \"\";\r\n      }\r\n    }\r\n    if (document.querySelectorAll(\".nice-select\")) {\r\n      if (!event.target.matches(\".nice-select .current\")) {\r\n        const dropdowns = document.querySelectorAll(\".dropdown\");\r\n        for (dropdown of dropdowns) {\r\n          dropdown.classList.remove(\"opened\");\r\n        }\r\n        const currents = document.querySelectorAll(\".nice-select > span\");\r\n        for (icon of currents) {\r\n          icon.classList.remove(\"opened\");\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  /* Always display User panel */\r\n  let userPanel;\r\n  if ((userPanel = document.querySelector(\".user-panel\"))) {\r\n    document.getElementById(\"topnav\").style.display = \"block\";\r\n    if (window.matchMedia(\"screen and (max-width: 992px)\").matches) {\r\n      document.getElementById(\"contact-us\").style.display = \"none\";\r\n    }\r\n    window.matchMedia(\"screen and (max-width: 992px)\").onchange = (event) => {\r\n      if (event.matches)\r\n        document.getElementById(\"contact-us\").style.display = \"none\";\r\n      else document.getElementById(\"contact-us\").style.display = \"flex\";\r\n    };\r\n  }\r\n\r\n  /* Main page Counters JS functions */\r\n  const counters = document.querySelectorAll(\".counter\");\r\n  const regexp = new RegExp(\"/about_us$\");\r\n  let offset = 1700;\r\n  if (regexp.test(pathname)) offset = 400;\r\n\r\n  /* Event handler for page scrolls */\r\n  window.addEventListener(\"scroll\", () => {\r\n    if (window.scrollY >= offset) {\r\n      const speed = 500;\r\n      counters.forEach((counter) => {\r\n        const updateCount = () => {\r\n          const target = +counter.getAttribute(\"data-target\");\r\n          const count = +counter.innerText;\r\n\r\n          const increment = target / speed;\r\n\r\n          if (count < target) {\r\n            counter.innerText = Math.ceil(count + increment);\r\n            setTimeout(updateCount, 1);\r\n          } else {\r\n            count.innerText = target;\r\n          }\r\n        };\r\n        updateCount();\r\n      });\r\n    }\r\n\r\n    if (sticky_header_enabled_pages.includes(pathname)) sticky_header();\r\n  });\r\n\r\n  // Append an event listener to the goto top button\r\n  const gotop_btn = document.getElementById(\"gotop_btn\");\r\n  gotop_btn.addEventListener(\"click\", () => gotop());\r\n\r\n  // Append an event listener to the menu wrapper\r\n  const main_menu_btn = document.querySelector(\"header div.menu-wrapper\");\r\n  main_menu_btn.addEventListener(\"click\", () => drop_menu());\r\n\r\n  // Display user panel when a user is logged in\r\n  const dropbtn = document.querySelector(\".dropbtn\");\r\n  if (dropbtn) {\r\n    dropbtn.onclick = () => {\r\n      const dropdown = document.querySelector(\".user-panel .dropdown\");\r\n      dropdown.style.top = \"100%\";\r\n      dropdown.style.opacity = \"1\";\r\n      dropdown.style.visibility = \"visible\";\r\n    };\r\n  }\r\n\r\n  // Selection of option for the select elements of the nice-selects\r\n  const nice_select_options = document.querySelectorAll(\r\n    \".nice-select .dropdown li\"\r\n  );\r\n  for (const select_option of nice_select_options) {\r\n    // Attaches an event handler to each nice-select list item\r\n    select_option.addEventListener(\"click\", (event) => {\r\n      const target = event.target;\r\n      const value = target.innerText;\r\n      const parent = target.parentElement;\r\n\r\n      // Removes class 'selected' from all list items and the class atrribute itself\r\n      for (const item of parent.children) {\r\n        item.classList.remove(\"selected\");\r\n        item.removeAttribute(\"class\");\r\n      }\r\n      // Adds the class 'selected' to the target\r\n      target.classList.add(\"selected\");\r\n      // Selects the 'current' element and update its content\r\n      const current = target.parentElement.previousElementSibling;\r\n      current.innerText = value;\r\n      // Select the 'select' element\r\n      const select = target.parentElement.nextElementSibling;\r\n      for (const option of select.children) {\r\n        option.removeAttribute(\"selected\");\r\n        if (option.innerText === value) {\r\n          option.setAttribute(\"selected\", \"\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /************************************************************************************\r\n   *********      GENERAL FORM INPUTS EVENT LISTENERS      \t\t\t       **********\r\n   ************************************************************************************/\r\n\r\n  // Passwords\r\n  let passwords = document.querySelectorAll(\"input[type='password']\");\r\n  for (const password of passwords) {\r\n    if (password.id === \"confirm-password\") continue;\r\n    password.addEventListener(\"keyup\", (event) => {\r\n      const target = event.currentTarget;\r\n      const parent = target.parentElement;\r\n      const value = target.value;\r\n\r\n      if (value) {\r\n        event.currentTarget.setAttribute(\"value\", value);\r\n        if (\r\n          path_to_signup.test(pathname) ||\r\n          path_to_recoveryACC.test(pathname)\r\n        ) {\r\n          if (!validatePassword(value)) {\r\n            if (!target.nextElementSibling.nextElementSibling) {\r\n              const msg = element(\r\n                \"div\",\r\n                \"error\",\r\n                \"Passwords must at least be of 8 characters long\"\r\n              );\r\n              target.style.borderColor = \"red\";\r\n              parent.appendChild(msg);\r\n            }\r\n          } else {\r\n            if (target.nextElementSibling.nextElementSibling) {\r\n              if (\r\n                target.nextElementSibling.nextElementSibling.matches(\".error\")\r\n              ) {\r\n                parent.removeChild(\r\n                  target.nextElementSibling.nextElementSibling\r\n                );\r\n                target.style.borderColor = \"green\";\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        target.removeAttribute(\"value\");\r\n        target.removeAttribute(\"style\");\r\n        if (target.nextElementSibling.nextElementSibling) {\r\n          if (target.nextElementSibling.nextElementSibling.matches(\".error\")) {\r\n            parent.removeChild(target.nextElementSibling.nextElementSibling);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Email inputs\r\n  let emails = document.querySelectorAll(\"input[type='email']\");\r\n  for (const email of emails) {\r\n    email.addEventListener(\"keyup\", (event) => {\r\n      const target = event.currentTarget;\r\n      const parent = target.parentElement;\r\n      const value = target.value;\r\n\r\n      if (value) {\r\n        // If email input is not a real email address\r\n        if (!validateEmail(value)) {\r\n          if (!target.nextElementSibling) {\r\n            const msg = element(\"div\", \"error\", \"Invalid email address\");\r\n            target.style.borderColor = \"red\";\r\n            parent.appendChild(msg);\r\n          }\r\n        } else {\r\n          if (target.nextElementSibling) {\r\n            if (target.nextElementSibling.matches(\".error\")) {\r\n              parent.removeChild(target.nextElementSibling);\r\n              target.style.borderColor = \"green\";\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        target.removeAttribute(\"style\");\r\n        if (target.nextElementSibling) {\r\n          if (target.nextElementSibling.matches(\".error\")) {\r\n            parent.removeChild(target.nextElementSibling);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Phone numbers inputs\r\n  const phoneNumbers = document.querySelectorAll(\r\n    \"input[type='number']#phoneNumber\"\r\n  );\r\n  for (const phoneNumber of phoneNumbers) {\r\n    phoneNumber.addEventListener(\"keyup\", (event) => {\r\n      const target = event.currentTarget;\r\n      const parent = target.parentElement;\r\n      const value = target.value;\r\n\r\n      if (value) {\r\n        if (!validatePhone(value)) {\r\n          if (!target.nextElementSibling) {\r\n            const msg = element(\"div\", \"error\", \"Invalid phone number\");\r\n            target.style.borderColor = \"red\";\r\n            parent.appendChild(msg);\r\n          }\r\n        } else {\r\n          if (target.nextElementSibling) {\r\n            if (target.nextElementSibling.matches(\".error\")) {\r\n              parent.removeChild(target.nextElementSibling);\r\n              target.style.borderColor = \"green\";\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        target.removeAttribute(\"style\");\r\n        if (target.nextElementSibling) {\r\n          if (target.nextElementSibling.matches(\".error\")) {\r\n            parent.removeChild(target.nextElementSibling);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Toggle visiblity button\r\n  let toggle_btns = document.getElementsByClassName(\"password-visibility-btn\");\r\n  for (const toggle_btn of toggle_btns) {\r\n    toggle_btn.addEventListener(\"click\", (event) => {\r\n      const target = event.currentTarget;\r\n      const icon = target.firstElementChild;\r\n      const input = target.previousElementSibling;\r\n      const type = input.getAttribute(\"type\");\r\n\r\n      if (type === \"text\") {\r\n        input.setAttribute(\"type\", \"password\");\r\n        icon.classList.remove(\"fa-eye-slash\");\r\n        icon.classList.add(\"fa-eye\");\r\n      } else {\r\n        input.setAttribute(\"type\", \"text\");\r\n        icon.classList.remove(\"fa-eye\");\r\n        icon.classList.add(\"fa-eye-slash\");\r\n      }\r\n    });\r\n  }\r\n\r\n  // IF URL IS SET TO POINT PAGES CONATINING SIGN UP FORMS\r\n  if (path_to_signup.test(pathname)) {\r\n    const countryInput = document.querySelector(\"input[type='text']#country\");\r\n    // Country Input Event\r\n    countryInput.addEventListener(\"keyup\", (event) => {\r\n      const target = event.currentTarget;\r\n      const parent = target.parentElement;\r\n      const value = target.value;\r\n      if (value) {\r\n        if (!validateCountry(value)) {\r\n          if (!target.nextElementSibling) {\r\n            const msg = element(\"div\", \"error\", \"Invalid country name\");\r\n            parent.appendChild(msg);\r\n          }\r\n        } else {\r\n          if (target.nextElementSibling) {\r\n            if (target.nextElementSibling.matches(\".error\")) {\r\n              parent.removeChild(target.nextElementSibling);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (target.nextElementSibling) {\r\n          if (target.nextElementSibling.matches(\".error\")) {\r\n            parent.removeChild(target.nextElementSibling);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const textarea = document.querySelector(\"textarea#aboutme\");\r\n    // Sign up textarea: On Key up Event\r\n    textarea.addEventListener(\"keyup\", (event) => {\r\n      const target = event.currentTarget;\r\n      const parent = target.parentElement;\r\n      const value = target.value;\r\n      if (value) {\r\n        if (!validateTextArea(value)) {\r\n          if (!target.nextElementSibling) {\r\n            const msg = element(\r\n              \"div\",\r\n              \"error\",\r\n              \"Please provide a short description\"\r\n            );\r\n            parent.appendChild(msg);\r\n          }\r\n        } else {\r\n          if (target.nextElementSibling) {\r\n            if (target.nextElementSibling.matches(\".error\")) {\r\n              parent.removeChild(target.nextElementSibling);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (target.nextElementSibling) {\r\n          if (target.nextElementSibling.matches(\".error\")) {\r\n            parent.removeChild(target.nextElementSibling);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Sign up textarea: On Change Event\r\n    textarea.addEventListener(\"change\", (event) => {\r\n      const target = event.currentTarget;\r\n      const parent = target.parentElement;\r\n      const value = target.value;\r\n      if (value) {\r\n        if (value.length < 50) {\r\n          if (!target.nextElementSibling) {\r\n            const msg = element(\"div\", \"error\", \"Too scanty description\");\r\n            parent.appendChild(msg);\r\n          }\r\n        } else {\r\n          if (target.nextElementSibling) {\r\n            if (target.nextElementSibling.matches(\".error\")) {\r\n              parent.removeChild(target.nextElementSibling);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (target.nextElementSibling) {\r\n          if (target.nextElementSibling.matches(\".error\")) {\r\n            parent.removeChild(target.nextElementSibling);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const sign_up_forms = document.querySelectorAll(\"form.sign_up\");\r\n    for (const form of sign_up_forms) {\r\n      // On SIGN UP form submit\r\n      form.addEventListener(\"submit\", (event) => {\r\n        const target = event.currentTarget;\r\n        let firstElement;\r\n        const textInputs = Array.from(\r\n          target.querySelectorAll(\"input[type='text']\")\r\n        );\r\n        if (target.id === \"register-form\") {\r\n          const passwords = Array.from(\r\n            target.querySelectorAll(\"input[type='password']\")\r\n          );\r\n          firstElement = target.querySelector(\"label[for='first-name']\");\r\n        } else firstElement = target.querySelector(\"div:first-child\");\r\n        const error_msgs = target.querySelectorAll(\"div.error\");\r\n        let error_msg, formdata;\r\n        if (isset(passwords)) {\r\n          formdata = {\r\n            textInputs: textInputs,\r\n            passwords: passwords,\r\n          };\r\n        } else {\r\n          formdata = { textInputs: textInputs };\r\n        }\r\n        if (error_msgs.length == 0) {\r\n          if ((error_msg = validateSignUp(formdata, target.id))) {\r\n            event.preventDefault();\r\n            let i = 1;\r\n            for (const msg of error_msg) {\r\n              const error = element(\"div\", \"error\", msg);\r\n              target.insertBefore(error, firstElement);\r\n              error.id = `error_${i}`;\r\n              i++;\r\n            }\r\n            setTimeout(() => {\r\n              for (let j = 1; j <= i; j++) {\r\n                const err_msg = target.querySelector(`div.error#error_${j}`);\r\n                target.removeChild(err_msg);\r\n              }\r\n            }, 5000);\r\n            gotop(); // Scroll page up to the top\r\n          }\r\n        } else event.preventDefault();\r\n      });\r\n      // On SIGN UP form change\r\n      form.addEventListener(\"change\", (event) => {\r\n        const target = event.currentTarget;\r\n        const error_msgs = target.querySelectorAll(\"div.error\");\r\n        const submitBtn = target.querySelector(\"button.form-btn\");\r\n        if (error_msgs.length > 0) {\r\n          submitBtn.setAttribute(\"disabled\", \"true\");\r\n        } else {\r\n          if (submitBtn.getAttribute(\"disabled\")) {\r\n            submitBtn.removeAttribute(\"disabled\");\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // END\r\n\r\n  /************************************************************************************\r\n   *********           PROFILE PAGE INPUTS' EVENT LISTENERS      \t\t\t       **********\r\n   ************************************************************************************/\r\n  // IF URL IS SET TO POINT PROFILE PAGE\r\n  if (path_to_profile.test(pathname)) {\r\n    const upload_form = document.getElementById(\"profile_picture\");\r\n    const input_picture = document.getElementById(\"input_picture\");\r\n    const input_text = document.getElementById(\"input_text\");\r\n    const preview = document.getElementById(\"picture_preview\");\r\n    const upload_btn = document.getElementById(\"upload_btn\");\r\n    const cancel_btn = document.getElementById(\"cancel_btn\");\r\n    const exit_btn = document.querySelector(\"#update_picture #exit\");\r\n    const memberID = document.getElementById(\"memberID\");\r\n    const chat_msg = document.getElementById(\"chat_msg\");\r\n    const user_search = document.getElementById(\"user_search\");\r\n    const chats_menu_btn = document.querySelector(\r\n      \"div.chatbox div.menu-wrapper\"\r\n    );\r\n    const updateProfileForm = document.getElementById(\"updateProfile\");\r\n    const member = document.getElementById(\"chat_sender\").value; // ID of the logged-in member\r\n    let intervalID; // For the typing function\r\n\r\n    // Stream chat-related updates from the chat update server\r\n    chats_update_socket = new WebSocket(\r\n      \"ws://localhost:5050/members/profile/actions/chats-updates.php?member=\" +\r\n        member\r\n    );\r\n\r\n    chats_update_socket.onmessage = (event) => {\r\n      const msg = JSON.parse(event.data);\r\n      updateChatUsers(msg.states);\r\n    };\r\n\r\n    chats_update_socket.onerror = function (event) {\r\n      console.log(\"Connection error with the chat update server\");\r\n    };\r\n\r\n    chats_update_socket.onclose = function (event) {\r\n      console.log(\"Connection closed with the chat update server\");\r\n    };\r\n\r\n    // Communicate with chat server\r\n    chats_socket = new WebSocket(\r\n      \"ws://localhost:5000/members/profile/actions/chats.php?member=\" + member\r\n    );\r\n\r\n    chats_socket.onopen = () => {\r\n      let users = document.querySelectorAll(\".chatbox ul.list_users li.user\");\r\n      if (users.length > 0) {\r\n        users[0].click();\r\n      }\r\n    };\r\n\r\n    chats_socket.onmessage = (event) => {\r\n      const msg = JSON.parse(event.data);\r\n      switch (msg.type) {\r\n        // updates the chat window with the new chat\r\n        case \"new_chat\":\r\n          postChat(msg);\r\n          break;\r\n        // Updates the status of chat member\r\n        case \"member_status\":\r\n          update_status(msg.member, msg.status);\r\n          break;\r\n        // Updates the chat window with the selected chat user\r\n        case \"chat_user_info\":\r\n          updateChatWindow(msg);\r\n          break;\r\n      }\r\n    };\r\n\r\n    chats_socket.onerror = function (event) {\r\n      console.log(\"Connection error with the chat server\");\r\n    };\r\n\r\n    chats_socket.onclose = function (event) {\r\n      console.log(\"Connection closed with the chat server\");\r\n    };\r\n\r\n    // Add an event listener to the menu button of the chat section\r\n    chats_menu_btn.addEventListener(\"click\", () => toggleOpen());\r\n\r\n    cancel_btn.addEventListener(\"click\", () => toggle_visibility(\"b1\"));\r\n    exit_btn.addEventListener(\"click\", () => toggle_visibility(\"b1\"));\r\n    chat_msg.addEventListener(\"focus\", () => {\r\n      intervalID = setInterval(() => {\r\n        typing(1);\r\n      }, 100);\r\n    });\r\n    chat_msg.addEventListener(\"blur\", () => {\r\n      clearInterval(intervalID);\r\n      typing(0);\r\n    });\r\n\r\n    // Read file immediated after its selection by the user\r\n    input_picture.addEventListener(\"change\", (event) => {\r\n      const target = event.currentTarget;\r\n      input_text.innerHTML = target.files[0].name;\r\n      const reader = new FileReader();\r\n\r\n      reader.onloadstart = () => {\r\n        for (child of preview.childNodes) child.remove();\r\n\r\n        const loading = element(\"span\", null, \"Loading thumbnail...\");\r\n        loading.id = \"loading\";\r\n        preview.appendChild(loading);\r\n      };\r\n      reader.onload = () => {\r\n        const loading = document.getElementById(\"loading\");\r\n        const img = document.createElement(\"img\");\r\n        img.src = reader.result;\r\n        preview.replaceChild(img, loading);\r\n      };\r\n      reader.readAsDataURL(target.files[0]);\r\n    });\r\n\r\n    upload_btn.addEventListener(\"click\", async () => {\r\n      if (input_picture.files[0]) {\r\n        const form = new FormData(upload_form);\r\n        try {\r\n          const request = new Request(\"/members/profile/actions/profile.php\", {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            credentials: \"same-origin\",\r\n            body: form,\r\n          });\r\n          // Uploads the file\r\n          const response = await fetch(request);\r\n          if (response.ok) {\r\n            const reply = await response.text();\r\n            if (reply == \"Successful\") {\r\n              cancel_btn.click();\r\n              setTimeout(() => refreshPicture(memberID.value), 1000);\r\n            }\r\n          }\r\n        } catch (reason) {\r\n          console.log(reason);\r\n        }\r\n      }\r\n    });\r\n    user_search.addEventListener(\"keyup\", (event) => searchChatUsers(event));\r\n    updateProfileForm.addEventListener(\"submit\", (event) =>\r\n      validateUpdateForm(event, updateProfileForm)\r\n    );\r\n  }\r\n  // END\r\n\r\n  /* Accordions */\r\n  const accordions = document.querySelectorAll(\".accordion\");\r\n  for (const accordion of accordions) {\r\n    const icon = accordion.children[0].children[0];\r\n\r\n    accordion.addEventListener(\"click\", (event) => {\r\n      if (!event.currentTarget.classList.contains(\"open\")) {\r\n        icon.style.transform = \"rotate(180deg)\";\r\n        accordion.classList.add(\"open\");\r\n      } else {\r\n        icon.removeAttribute(\"style\");\r\n        accordion.classList.remove(\"open\");\r\n      }\r\n    });\r\n  }\r\n\r\n  start_carousels();\r\n  start_countdowns();\r\n};\r\n","/**\r\n * Carousel Class\r\n */\r\n\r\n// Constants\r\nconst PREV = \"prev\";\r\nconst NEXT = \"next\";\r\n\r\n/*\r\n ******************************************************\r\n ***** Class Definition                           *****\r\n ******************************************************\r\n */\r\n\r\nclass carousel {\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.items = element.children; // Carousel items\r\n    this.length = element.children.length;\r\n    this.index = 0; // Internal Pointer\r\n    this.duration = 10000; // Carousel duration time in miliseconds\r\n    this.ACTIVE_CLASSNAME = \"active\";\r\n    this.special_carousels = [\"head-carousel\"]; // special carousels\r\n  }\r\n\r\n  // Public methods\r\n\r\n  start() {\r\n    this._slide(NEXT);\r\n    // setInterval(() => {\r\n    //     this._slide(NEXT);\r\n    // }, this.duration);\r\n  }\r\n\r\n  prev() {\r\n    this._slide(PREV);\r\n  }\r\n\r\n  next() {\r\n    this._slide(NEXT);\r\n  }\r\n\r\n  // Private methods\r\n\r\n  _movePointer() {\r\n    this.index = this.index + 1;\r\n  }\r\n\r\n  _slide(element) {\r\n    if (this.index > this.length - 1) {\r\n      this.index = 0;\r\n    }\r\n\r\n    let index, activeElement, previousElement;\r\n    let active = this.ACTIVE_CLASSNAME;\r\n    if (this.special_carousels.includes(this.element.id)) {\r\n      this.ACTIVE_CLASSNAME = \"f_active\";\r\n      active = this.ACTIVE_CLASSNAME;\r\n    }\r\n\r\n    switch (element) {\r\n      case \"next\":\r\n        for (const item of this.items) {\r\n          if (\r\n            item.classList.contains(\"previous\") ||\r\n            item.classList.contains(\"next\")\r\n          ) {\r\n            break;\r\n          } else {\r\n            this.index = this.index + 1; // Moves the pointer by 1\r\n            index = this.index - 1; // Get the pointer to the active element\r\n            activeElement = this.items[index];\r\n            // Get the previous element\r\n            if (index > 0) previousElement = this.items[index - 1];\r\n            else if (index <= 0) previousElement = this.items[this.length - 1];\r\n\r\n            activeElement.classList.add(active, \"next\");\r\n            previousElement.classList.add(\"previous\");\r\n\r\n            setTimeout(() => {\r\n              for (const item of this.items) {\r\n                item.classList.remove(active, \"previous\", \"next\");\r\n              }\r\n              activeElement.classList.add(active);\r\n              this.index = this.index - 1;\r\n              // Moves the pointer to the next element\r\n              this._movePointer();\r\n            }, 500);\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      case \"prev\":\r\n        for (const item of this.items) {\r\n          if (\r\n            item.classList.contains(\"previous\") ||\r\n            item.classList.contains(\"next\")\r\n          ) {\r\n            break;\r\n          } else {\r\n            this.index = this.index - 1; // Moves the pointer by 1\r\n            index = this.index + 1; // Get the pointer to active element\r\n            activeElement = this.items[index];\r\n            // Get the previous element\r\n            if (index > 0) previousElement = this.items[index - 1];\r\n            else if (index <= 0) previousElement = this.items[this.length - 1];\r\n\r\n            activeElement.classList.add(active, \"next-prev\");\r\n            previousElement.classList.add(\"previous-next\");\r\n\r\n            setTimeout(() => {\r\n              // Removes the class \"active\" from all items\r\n              for (const item of this.items) {\r\n                item.classList.remove(active, \"previous-next\", \"next-prev\");\r\n              }\r\n              activeElement.classList.add(active); // Display the item\r\n              this.index = this.index + 1;\r\n              // Moves the pointer to the next element\r\n              this._movePointer();\r\n            }, 500);\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Timer Countdown Class\r\n */\r\n\r\n/*\r\n ******************************************************\r\n ***** Class Definition                           *****\r\n ******************************************************\r\n */\r\n\r\nclass countdown {\r\n  constructor(element, event_date) {\r\n    this.date = new Date(event_date);\r\n    this.element = element;\r\n  }\r\n\r\n  // Public\r\n\r\n  start() {\r\n    // Starting the timer\r\n    setInterval(() => {\r\n      this._update();\r\n    }, 1000);\r\n  }\r\n\r\n  // Private\r\n\r\n  _diff() {\r\n    // Calculate the difference of time with the current date\r\n    let datediff = new date_diff(this.date);\r\n    return datediff.diff();\r\n  }\r\n\r\n  _update() {\r\n    // Update the timer labels\r\n    let day_label = this.element.children[0].children[1];\r\n    let hour_label = this.element.children[1].children[1];\r\n    let minute_label = this.element.children[2].children[1];\r\n    let second_label = this.element.children[3].children[1];\r\n\r\n    // Get the time difference\r\n    let time_diff = this._diff();\r\n\r\n    if (time_diff) {\r\n      day_label.innerText = time_diff.day;\r\n      hour_label.innerText = time_diff.hour;\r\n      minute_label.innerText = time_diff.minute;\r\n      second_label.innerText = time_diff.second;\r\n    } else {\r\n      day_label.innerText = 0;\r\n      hour_label.innerText = 0;\r\n      minute_label.innerText = 0;\r\n      second_label.innerText = 0;\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Date Difference Class\r\n */\r\n\r\n// Constant\r\nconst toSec = 1000;\r\nconst toMin = toSec * 60;\r\nconst toHour = toMin * 60;\r\nconst toDay = toHour * 24;\r\n\r\n/*\r\n ******************************************************\r\n ***** Class Definition                           *****\r\n ******************************************************\r\n */\r\n\r\nclass date_diff {\r\n  constructor(date) {\r\n    this.date = date;\r\n  }\r\n\r\n  done() {\r\n    if (!this.diff()) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  diff() {\r\n    let currentDate = new Date();\r\n    let diff = this.date.getTime() - currentDate.getTime();\r\n\r\n    let time_diff = false;\r\n\r\n    if (diff > 0) {\r\n      // Computation of the time difference\r\n      let day = Math.floor(diff / toDay);\r\n      diff = diff - day * toDay; // Remove the number of days from the difference.\r\n\r\n      let hour = Math.floor(diff / toHour);\r\n      diff = diff - hour * toHour; // Remove the number of hours from the difference\r\n\r\n      let minute = Math.floor(diff / toMin);\r\n      diff = diff - minute * toMin; // Remove the number of minutes from the difference\r\n\r\n      let second = Math.floor(diff / toSec);\r\n\r\n      // Stores the result in an object and is returned by the method\r\n      time_diff = {\r\n        second: second,\r\n        minute: minute,\r\n        hour: hour,\r\n        day: day,\r\n      };\r\n    }\r\n\r\n    return time_diff;\r\n  }\r\n}\r\n","/**\r\n * FUNCTIONS LIBRARY\r\n * HEADER SECTION FUNCTIONS\r\n *\r\n */\r\n\r\nfunction sticky_header() {\r\n  let header = document.querySelector(\"body > header\");\r\n  let height = header.clientHeight;\r\n  if (window.pageYOffset >= height) {\r\n    header.classList.add(\"slidein\", \"scrollState\");\r\n  } else {\r\n    header.classList.remove(\"slidein\", \"scrollState\");\r\n  }\r\n}\r\n\r\n/* Mobile nav dropdown function */\r\nfunction drop_menu() {\r\n  const menu_links = document.querySelector(\"header div.menu-links\");\r\n  const menubtn = document.querySelector(\"header div.menu-wrapper div.menu\");\r\n\r\n  if (menu_links.classList.contains(\"open\")) {\r\n    menu_links.classList.remove(\"open\");\r\n    if (document.querySelector(\".user-panel\"))\r\n      menu_links.removeAttribute(\"style\");\r\n  } else {\r\n    menu_links.classList.add(\"open\");\r\n    if (document.querySelector(\".user-panel\")) menu_links.style.top = \"100px\";\r\n  }\r\n  menubtn.classList.toggle(\"open\");\r\n}\r\n","/**\r\n * FUNCTIONS LIBRARY\r\n * NICE SELECT CLASS FUNCTIONS\r\n */\r\n\r\n/**\r\n * Opens a nice-select element\r\n * @param {Event} event Event Object\r\n * @param {HTMLElement} niceSelect The HTML nice-select element\r\n */\r\nfunction openSelect(event, niceSelect) {\r\n  // Closes all open nice select dropdowns\r\n  const dropdowns = document.querySelectorAll(\".nice-select .dropdown\");\r\n  for (const dropdown of dropdowns) {\r\n    dropdown.classList.remove(\"opened\");\r\n  }\r\n  // Removes the class .opened from all nice-selects\r\n  const currents = document.querySelectorAll(\".nice-select > span\");\r\n  for (const current of currents) {\r\n    current.classList.remove(\"opened\");\r\n  }\r\n\r\n  // Open the specific dropdown\r\n  const selector = \"#\" + niceSelect + \" .dropdown\";\r\n  const dropdown = document.querySelector(selector);\r\n  dropdown.classList.add(\"opened\");\r\n\r\n  // Rotates the arrow\r\n  event.target.classList.add(\"opened\");\r\n}\r\n","/**\r\n * FUNCTIONS LIBRARY\r\n * PROFILE PAGE FUNCTIONS\r\n */\r\n\r\n// Global variable for setInterval\r\nlet interval;\r\n\r\nfunction openTab(event, tab) {\r\n  // Function for opening and closure of tabs in profile page\r\n  let tabcontents, tabcontent, tablinks, tablink;\r\n  tabcontents = document.getElementsByClassName(\"tabcontent\");\r\n  tablinks = document.getElementsByClassName(\"tablink\");\r\n\r\n  // Hides all tabs\r\n  for (tabcontent of tabcontents) {\r\n    tabcontent.style.display = \"none\";\r\n  }\r\n  // Remove the active class from tab links\r\n  for (tablink of tablinks) {\r\n    tablink.classList.remove(\"active\");\r\n  }\r\n  // Display the current tab and add the active class\r\n  document.getElementById(tab).style.display = \"block\";\r\n  event.currentTarget.parentElement.classList.add(\"active\");\r\n  if (tab == \"chats\") {\r\n    if (chats_socket.readyState == 1) {\r\n      let users = document.querySelectorAll(\".chatbox ul.list_users li.user\");\r\n      if (users.length > 0) {\r\n        users[0].click();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction openChatTab(event, requestedUser, requester) {\r\n  const chat_users = document.querySelectorAll(\".chatbox .list_users .user\");\r\n  for (let chat_user of chat_users) chat_user.classList.remove(\"open\");\r\n\r\n  event.currentTarget.classList.add(\"open\");\r\n  const chatReceiver = document.getElementById(\"chat_receiver\");\r\n  chatReceiver.setAttribute(\"value\", requestedUser);\r\n  const memberID = document.getElementById(\"chat_sender\").value;\r\n\r\n  if (window.matchMedia(\"screen and (max-width: 768px)\").matches) {\r\n    const menubar = document.querySelectorAll(\".menu-wrapper .menu\")[1];\r\n    menubar.click();\r\n  }\r\n\r\n  let request_user = {\r\n    action: \"get_chat_user\",\r\n    requestedUser: requestedUser,\r\n    requester: requester,\r\n  };\r\n  let request = JSON.stringify(request_user);\r\n  if (chats_socket.readyState == 1) {\r\n    chats_socket.send(request);\r\n    if (!isset(interval)) {\r\n      interval = setInterval(() => {\r\n        update_last_activity();\r\n      }, 15000);\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateChatWindow(chat_user_info) {\r\n  const avatar = document.querySelector(\".chatbox .correspondent_info img\");\r\n  const username = document.getElementById(\"correspondent_name\");\r\n  const status = document.getElementById(\"correspondent_status\");\r\n  const chatWindow = document.querySelector(\"div.chat_window\");\r\n  // Proceeds to the update of corresponding fields\r\n  avatar.src = chat_user_info.avatar;\r\n  username.innerHTML = chat_user_info.username;\r\n  status.innerHTML = chat_user_info.status;\r\n  if (chat_user_info.status == \"Offline\")\r\n    status.classList.add(chat_user_info.status.toLowerCase());\r\n  else status.classList.remove(\"offline\");\r\n  // updates the chat window to new chats\r\n  if (chatWindow.children[0].innerHTML == \"<span>No conversation</span>\") {\r\n    chatWindow.removeChild(chatWindow.children[0]);\r\n  } else {\r\n    chatWindow.innerHTML = \"\";\r\n  }\r\n  let conversation = chat_user_info.conversation;\r\n  let type = typeof conversation;\r\n  // console.log(conversation);\r\n  if (type == \"string\") {\r\n    chatWindow.innerHTML = conversation;\r\n  } else if (type == \"object\") {\r\n    for (let index = 0; index < conversation.length; index++) {\r\n      const element = conversation[index];\r\n      chatWindow.innerHTML += element;\r\n    }\r\n  }\r\n}\r\n\r\nfunction sendChat() {\r\n  const sender = document.getElementById(\"chat_sender\").value;\r\n  const receiver = document.getElementById(\"chat_receiver\").value;\r\n  const chat_msg = document.getElementById(\"chat_msg\");\r\n  const msg = chat_msg.value;\r\n\r\n  if (isset(msg)) {\r\n    if (chats_socket.readyState == 1) {\r\n      let chat = {\r\n        action: \"post_chat\",\r\n        sender: sender,\r\n        receiver: receiver,\r\n        message: msg,\r\n      };\r\n      chat = JSON.stringify(chat);\r\n      chats_socket.send(chat);\r\n      chat_msg.value = \"\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction postChat(chat) {\r\n  const chatWindow = document.querySelector(\"div.chat_window\");\r\n  const receiver = document.getElementById(\"chat_receiver\").value;\r\n  const sender = document.getElementById(\"chat_sender\").value;\r\n  let newChat;\r\n\r\n  if (sender == chat.sender) {\r\n    newChat =\r\n      '<div class=\"my_chat\"><div><p>' +\r\n      chat.message +\r\n      '</p><span class=\"time\">' +\r\n      chat.timestamp +\r\n      '</span></div><img src=\"' +\r\n      chat.avatar +\r\n      '\"/>';\r\n  } else if (sender == chat.receiver) {\r\n    newChat =\r\n      '<div class=\"client_chat\"><img src=\"' +\r\n      chat.avatar +\r\n      '\"/><div><p>' +\r\n      chat.message +\r\n      '</p><span class=\"time\">' +\r\n      chat.timestamp +\r\n      \"</span></div></div>\";\r\n  }\r\n\r\n  if (isset(newChat)) {\r\n    if (\r\n      (sender == chat.sender && receiver == chat.receiver) ||\r\n      (sender == chat.receiver && receiver == chat.sender)\r\n    ) {\r\n      if (chatWindow.children[0].innerHTML == \"<span>No conversation</span>\") {\r\n        chatWindow.removeChild(chatWindow.children[0]);\r\n      }\r\n      chatWindow.innerHTML += newChat;\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateChatUsers(new_states) {\r\n  const users = [];\r\n  const times = document.querySelectorAll(\"li.user span.time\");\r\n  const statuses = document.querySelectorAll(\"li.user > span\");\r\n\r\n  for (let x = 0; x < times.length; x++) {\r\n    for (let y = 0; y < statuses.length; y++) {\r\n      if (x === y) {\r\n        let user_block = [times[x], statuses[y]];\r\n        users.push(user_block);\r\n      }\r\n    }\r\n  }\r\n  // displaying the results\r\n  for (let j = 0; j < users.length; j++) {\r\n    for (let i = 0; i < new_states.length; i++) {\r\n      if (j === new_states[i].n) {\r\n        users[j][0].innerHTML = new_states[i].lastSeen;\r\n        users[j][1].className = `status ${new_states[i].status}`;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction update_last_activity() {\r\n  const memberID = document.getElementById(\"chat_sender\").value;\r\n  let request = {\r\n    action: \"update_last_activity\",\r\n    member: memberID,\r\n  };\r\n  let request_json = JSON.stringify(request);\r\n  if (chats_socket.readyState == 1) {\r\n    chats_socket.send(request_json);\r\n  }\r\n}\r\n\r\nfunction update_status(memberID, status) {\r\n  const member_status = document.getElementById(\"correspondent_status\");\r\n  const chatReceiver = document.getElementById(\"chat_receiver\").value;\r\n  if (memberID == chatReceiver) {\r\n    member_status.innerHTML = status;\r\n    if (status == \"Offline\") member_status.classList.add(status.toLowerCase());\r\n    else member_status.classList.remove(\"offline\");\r\n  }\r\n}\r\n\r\nfunction typing(n) {\r\n  const memberID = document.getElementById(\"chat_sender\").value; // ID of the member typing\r\n  const correspondentID = document.getElementById(\"chat_receiver\").value; // ID of the member to notify of this event\r\n  let typing_status = {\r\n    action: \"update_typing_status\",\r\n    member: memberID,\r\n    correspondent: correspondentID,\r\n    value: n,\r\n  };\r\n  let request = JSON.stringify(typing_status);\r\n  // sends the request\r\n  chats_socket.send(request);\r\n}\r\n\r\nasync function refreshPicture(memberID) {\r\n  const profile_pictures = [\r\n    document.querySelector(\".user-heading a img\"),\r\n    document.querySelector(\".user-panel .dropdown img\"),\r\n    document.querySelector(\".user-panel img\"),\r\n  ];\r\n  const params = `?action=fetchPicture&memberID=${memberID}`;\r\n  const response = await fetch(`/members/profile/actions/profile.php${params}`);\r\n  const src = await response.text();\r\n  for (const profile_picture of profile_pictures) {\r\n    profile_picture.src = src;\r\n  }\r\n}\r\n\r\nfunction searchChatUsers(event) {\r\n  const value = event.currentTarget.value;\r\n  const chatUsers = document.querySelectorAll(\"li.user\");\r\n  if (value.length > 0) {\r\n    for (const chatUser of chatUsers) {\r\n      let name = chatUser.querySelector(\".user_name\").innerText;\r\n      const regexp = new RegExp(value, \"i\");\r\n      if (!regexp.test(name)) {\r\n        chatUser.style.display = \"none\";\r\n      }\r\n    }\r\n  } else {\r\n    for (const chatUser of chatUsers) {\r\n      if (chatUser.style.display == \"none\") {\r\n        chatUser.removeAttribute(\"style\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateUpdateForm(event, form) {\r\n  const inputs = form.querySelectorAll(\"div > input\");\r\n  const selectedInputs = [];\r\n  for (const element of inputs) {\r\n    if (element.disabled) continue;\r\n    selectedInputs.push(element);\r\n  }\r\n  selectedInputs.push(form.querySelector(\"div > textarea\"));\r\n\r\n  let validity = false;\r\n  for (const element of selectedInputs) {\r\n    if (element.type == \"text\" && isset(element.value)) {\r\n      validity = validity || validateText(element.value, 4);\r\n    }\r\n    if (element.type == \"number\" && isset(element.value)) {\r\n      validity = validity || validatePhone(element.value);\r\n    }\r\n    if (element.type == \"email\" && isset(element.value)) {\r\n      validity = validity || validateEmail(element.value);\r\n    }\r\n    if (element.type == \"country\" && isset(element.value)) {\r\n      validity = validity || validateCountry(element.value);\r\n    }\r\n    if (element.type == \"textarea\" && isset(element.value)) {\r\n      validity = validity || element.value >= 50;\r\n    }\r\n  }\r\n  if (!validity) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n","/**\r\n * FUNCTIONS LIBRARY\r\n * MISCELLANEOUS FUNCTIONS\r\n */\r\n\r\nfunction gotop() {\r\n  window.scrollTo({\r\n    top: \"0px\",\r\n    left: \"0px\",\r\n    behavior: \"smooth\",\r\n  });\r\n}\r\n\r\n/**\r\n * Fades out gradually an element\r\n * @param {HTMLElement} elem The HTML element\r\n * @param {number} ms Time in milliseconds\r\n */\r\nfunction fadeOut(elem, ms) {\r\n  if (!elem) {\r\n    return null;\r\n  }\r\n  if (ms) {\r\n    let opacity = 1;\r\n    let timer = setInterval(() => {\r\n      opacity -= 50 / ms;\r\n      if (opacity <= 0) {\r\n        clearInterval(timer);\r\n        opacity = 0;\r\n        document.body.removeChild(elem);\r\n      }\r\n      elem.style.opacity = opacity;\r\n      elem.style.filter = \"alpha(opacity=\" + opacity * 100 + \")\";\r\n    }, 50);\r\n  } else {\r\n    elem.style.opacity = 0;\r\n    elem.style.filter = \"alpha(opacity=0)\";\r\n    elem.style.display = \"none\";\r\n    elem.style.visibility = \"hidden\";\r\n  }\r\n}\r\n\r\n/**\r\n * Activates all existings carousels\r\n */\r\nfunction start_carousels() {\r\n  let carousel_prev, carousel_next, slides;\r\n  if ((slides = document.querySelectorAll(\".carousel\"))) {\r\n    for (const slide of slides) {\r\n      const id = slide.id;\r\n      let slideItem = new carousel(slide);\r\n      slideItem.start();\r\n\r\n      if (\r\n        (carousel_prev = document.querySelectorAll(\r\n          \"#\" + id + \" + .carousel-nav [data-ride='prev']\"\r\n        )) &&\r\n        (carousel_next = document.querySelectorAll(\r\n          \"#\" + id + \" + .carousel-nav [data-ride='next']\"\r\n        ))\r\n      ) {\r\n        for (const prev of carousel_prev) {\r\n          prev.addEventListener(\"click\", () => {\r\n            slideItem.prev();\r\n          });\r\n        }\r\n\r\n        for (const next of carousel_next) {\r\n          next.addEventListener(\"click\", () => {\r\n            slideItem.next();\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Toggles blur backgrounds open\r\n * @param {string} id Blurred background's ID\r\n */\r\nfunction toggle_visibility(id) {\r\n  const elem = document.getElementById(id);\r\n  const child = elem.firstElementChild;\r\n  let display = elem.style.display;\r\n  if (display == \"flex\") {\r\n    child.classList.remove(\"open\");\r\n    setTimeout(() => elem.removeAttribute(\"style\"), 300);\r\n  } else {\r\n    elem.style.display = \"flex\";\r\n    setTimeout(() => child.classList.add(\"open\"), 100);\r\n  }\r\n}\r\n\r\n/**\r\n * Toggle the state of chat users panel: open or closed\r\n */\r\nfunction toggleOpen() {\r\n  const user_panel = document.querySelector(\"div.chatbox div.chat_users\");\r\n  const menubtn = document.querySelector(\r\n    \"div.chatbox div.menu-wrapper div.menu\"\r\n  );\r\n  const chats_section = user_panel.nextElementSibling;\r\n\r\n  if (user_panel.classList.contains(\"open\")) {\r\n    user_panel.classList.remove(\"open\");\r\n    setTimeout(() => {\r\n      chats_section.removeAttribute(\"style\");\r\n    }, 500);\r\n  } else {\r\n    user_panel.classList.add(\"open\");\r\n    chats_section.style.width = \"60%\";\r\n  }\r\n  menubtn.classList.toggle(\"open\");\r\n}\r\n\r\n/**\r\n * Starts all countdowns of events\r\n */\r\nfunction start_countdowns() {\r\n  let countdowns = document.querySelectorAll(\".timer\");\r\n  for (const t_countdown of countdowns) {\r\n    let date = t_countdown.getAttribute(\"data-date\");\r\n    // Initialization of an instance of the countdown\r\n    let time_countdown = new countdown(t_countdown, date);\r\n    time_countdown.start();\r\n  }\r\n}\r\n\r\n/**\r\n * Checks the existence of a variable.\r\n * @param {any} variable\r\n * @returns Either true or false\r\n */\r\nfunction isset(variable) {\r\n  // Determines if a variable is set to a value\r\n  return typeof variable == \"undefined\" ||\r\n    variable === null ||\r\n    variable.length == 0\r\n    ? false\r\n    : true;\r\n}\r\n\r\n/**\r\n * Creates a new element\r\n * @param {string} type Element's tag name\r\n * @param {string} class_list Element's class list\r\n * @param {string} innertext Element's text content\r\n * @returns The created element\r\n */\r\nfunction element(type, class_list = NULL, innertext) {\r\n  // Generates a new document element\r\n  let element = document.createElement(type);\r\n  element.classList.value = class_list;\r\n  element.innerText = innertext;\r\n  return element;\r\n}\r\n","/**\r\n * FUNCTIONS LIBRARY\r\n * VALIDATION FUNCTIONS\r\n */\r\n\r\n/**\r\n * Verifies email addresses\r\n * @param {string} email Email to be checked\r\n * @returns {boolean} validity\r\n */\r\nfunction validateEmail(email) {\r\n  let validity;\r\n  const mail_format = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n  // If email input is a real email address\r\n  if (email.match(mail_format)) validity = true;\r\n  else validity = false;\r\n  return validity;\r\n}\r\n\r\n/**\r\n * Verifies passwords\r\n * @param {string} password Password\r\n * @returns {boolean} Either True or False\r\n */\r\nfunction validatePassword(password) {\r\n  let validity;\r\n  if (/\\w{8}/.test(password)) validity = true;\r\n  else validity = false;\r\n  return validity;\r\n}\r\n\r\n/**\r\n * Verifies that a string \"name\" has \"n\" minimum number of characters\r\n * @param {string} name Name or Username\r\n * @param {number} n Number of characters\r\n * @returns {boolean}\r\n */\r\nfunction validateText(name, n) {\r\n  let validity;\r\n  let regexp = new RegExp(\"\\\\w{\" + n + \"}\");\r\n  if (regexp.test(name)) validity = true;\r\n  else validity = false;\r\n  return validity;\r\n}\r\n\r\n/**\r\n * Verifies that the textarea content has not more than 50 words\r\n * @param {string} text Textarea content\r\n * @returns {boolean} Either True or False\r\n */\r\nfunction validateTextArea(text) {\r\n  const words = text.split(\" \");\r\n  const word_length = words.length;\r\n  if (word_length > 50) validity = false;\r\n  else validity = true;\r\n  return validity;\r\n}\r\n\r\n/**\r\n * Verifies that the phone number has exactly 9 digits\r\n * @param {number} phone_number Phone number\r\n * @returns {boolean} Either True or False\r\n */\r\nfunction validatePhone(phone_number) {\r\n  if (/^\\d{9}$/.test(phone_number)) validity = true;\r\n  else validity = false;\r\n  return validity;\r\n}\r\n\r\n// Fetching valid countries from the json file\r\nlet valid_countries;\r\nif (\r\n  /^\\/members\\/(register|profile){1}\\.(html|php){1}$/.test(\r\n    window.location.pathname\r\n  )\r\n) {\r\n  fetch(\"/static/database/valid_countries.json\")\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      valid_countries = json.Countries;\r\n    })\r\n    .catch((reason) => console.log(reason));\r\n}\r\n\r\n/**\r\n * Verifies that the country inputted is an existing country\r\n * @param {string} country Country name\r\n * @returns {boolean} Either True or False\r\n */\r\nfunction validateCountry(country) {\r\n  let validity = false;\r\n  let escaped = country.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\r\n  const regexp = new RegExp(\"^\" + escaped + \"$\", \"i\");\r\n  for (let i = 0; i < valid_countries.length; i++) {\r\n    if (valid_countries[i].match(regexp)) {\r\n      validity = true;\r\n      break;\r\n    }\r\n  }\r\n  return validity;\r\n}\r\n\r\nfunction validateSignUp(formData, formId) {\r\n  let msg = [];\r\n  const formIds = [\"register-form\", \"updateProfile\"];\r\n  // In case of passwords mismatch\r\n  if (\r\n    formId == formIds[0] &&\r\n    formData.passwords[0].value !== formData.passwords[1].value\r\n  )\r\n    msg.push(\"Passwords mismatched\");\r\n  // In case of invalid username or names\r\n  if (\r\n    !(\r\n      validateText(formData.textInputs[0].value, 4) &&\r\n      validateText(formData.textInputs[1].value, 4) &&\r\n      validateText(formData.textInputs[2].value, 4)\r\n    )\r\n  )\r\n    msg.push(\"Invalid names or username\");\r\n  // In case of invalid city names\r\n  if (!validateText(formData.textInputs[3].value, 5))\r\n    msg.push(\"Invalid city name\");\r\n  return msg.length > 0 ? msg : null;\r\n}\r\n"]}