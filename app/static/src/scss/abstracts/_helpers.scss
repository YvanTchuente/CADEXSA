/*
 * Helpers SCSS
 * Mixins and Functions
 */

@use "variables" as *;
@use "sass:math";

/* Mixin dedicated to headings */
@mixin font($font-family, $font-size) {
  font: {
    family: $font-family;
    size: $font-size;
  }
}

/* Centering element(s) */
@mixin center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Media queries */
@mixin min-responsify($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin max-responsify($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin range-responsify($breakpoint1, $breakpoint2) {
  @media screen and (min-width: $breakpoint1) and (max-width: $breakpoint2) {
    @content;
  }
}

/* General grid Generator for miscellaneous grids */
@mixin grid-generator(
  $number_of_columns: 2,
  $number_of_elements: $number_of_columns,
  $gap: 1.5
) {
  $j: 1;
  $k: 1;
  $width2: 6;
  $width1: math.div(12, $number_of_columns); // Calculate width of each column
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: #{$gap}em;
  @for $i from 1 through $number_of_elements {
    > div:nth-child(#{$i}) {
      grid-column: 1 / span 12;

      @if (($i % 2) > 0 or $k > 13) {
        $k: 1;
      }

      @if ($j > 12) {
        $j: 1;
      }

      @include min-responsify($device-medium) {
        grid-column: $k / span #{$width2};
      }

      @include min-responsify($device-large) {
        grid-column: $j / span #{$width1};
      }
    }
    $j: ($j + $width1);
    $k: ($k + $width2);
  }
}

// Animations
@mixin animation(
  $name,
  $duration: 0.5,
  $timing-function: ease-in-out,
  $delay: 0,
  $iteration-count: 1
) {
  animation: #{$name} #{$duration}s #{$timing-function} #{$delay}s #{$iteration-count};
}
